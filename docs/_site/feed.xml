<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-07-14T16:00:16-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Spaced Out Thoughts Development Foundation</title><subtitle>A small Ruby shop determined to make smart contracts as easy to use as possible.</subtitle><entry><title type="html">Soroban Rust Backend Compiler Plugin Deep Dive: Translating And If Let Back to Rust</title><link href="http://localhost:4000/2024/07/10/if-let-back-to-rust.html" rel="alternate" type="text/html" title="Soroban Rust Backend Compiler Plugin Deep Dive: Translating And If Let Back to Rust" /><published>2024-07-10T00:00:00-06:00</published><updated>2024-07-10T00:00:00-06:00</updated><id>http://localhost:4000/2024/07/10/if-let-back-to-rust</id><content type="html" xml:base="http://localhost:4000/2024/07/10/if-let-back-to-rust.html"><![CDATA[<p>In a previous post title <em>Rust Specific Construct Representations ep. 2: Let-Else</em>, I demonstrated how we can translate <code class="language-plaintext highlighter-rouge">if let</code> from Rust to DTR.</p>

<p>Consider the simplest example:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="k">let</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">foobar</span><span class="p">)</span> <span class="o">=</span> <span class="n">ok_foobar</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">foobar</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The DTR is nearly just as straightforward.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ id: 0, instruction: try_assign, input: (ok_foobar, Ok(foobar)), assign: CONDITIONAL_JUMP_ASSIGNMENT_1, scope: 0 }
{ id: 1, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_1, 1), scope: 0 }
{ id: 2, instruction: return, input: (foobar), scope: 1 }
</code></pre></div></div>

<p>Yet (and at the risk of sounding like a broken record), DTR, or <a href="http://localhost:4000/digicus/#digicus-textual-representation">Digicus Textual Representation</a>, defines method logic via a set of sequentially executed transactions. DTR instructions have a <em>scope</em> field to represent blocks of contiguously executed code. Only by jumping between scopes can we emulate branching and looping.</p>

<p>Thus, code generation is performed over the limited set of instructions defined in the Digicus spec and without an <code class="language-plaintext highlighter-rouge">if let</code> instruction, it may not be immediately clear we’re handling such a statement.</p>

<p>To accomplish this, we’ll need two tools from our toolkit:</p>
<ol>
  <li>the <strong>condensation</strong> step outlined in the previous post</li>
  <li>continued (ab)use of a variadic definition of jump</li>
</ol>

<p>In the previous post, we briefly looked at taking <em>assign</em> instructions defining CONDITIONAL_RESULTs and substituting these into the <code class="language-plaintext highlighter-rouge">jump</code>. Lets say we accomplish this with the help of a <a href="https://en.wikipedia.org/wiki/Symbol_table">symbol table</a>. Our entry may look like this:</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Scope</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CONDITIONAL_JUMP_ASSIGNMENT_1</td>
      <td>X</td>
      <td>[OK(foobar), ok_foobar]</td>
    </tr>
  </tbody>
</table>

<p>From here, we’d substitute in <code class="language-plaintext highlighter-rouge">CONDITIONAL_JUMP_ASSIGNMENT_1</code> within the jump instruction:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ id: 1, instruction: jump, input: (OK(foobar), ok_foobar, 1), scope: 0 }
</code></pre></div></div>

<p>Note that at time of writing, three inputs is not supported</p>

<div style="text-align:center">
  <img src="../../../images/jump_instruction_description.png" alt="jump instruction definition" />
</div>

<p>Thus, we can define a third case.</p>

<blockquote>
  <p>whenever three inputs are given, the first is the <em>let</em> left hand side, the second the <em>let</em> hand side, and the third the scope to jump to if the condition is true</p>
</blockquote>

<p>With this new definition, and our condensed instruction set (reproduced below)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ id: 1, instruction: jump, input: (OK(foobar), ok_foobar, 1), scope: 0 }
{ id: 2, instruction: return, input: (foobar), scope: 1 }
</code></pre></div></div>

<p>we can translate back to rust (instruction ids are square bracketed):</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// [1]</span>
<span class="k">if</span> <span class="k">let</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">foobar</span><span class="p">)</span> <span class="o">=</span> <span class="n">ok_foobar</span> <span class="p">{</span>
  <span class="c1">// [2]</span>
  <span class="k">return</span> <span class="n">foobar</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[In a previous post title Rust Specific Construct Representations ep. 2: Let-Else, I demonstrated how we can translate if let from Rust to DTR.]]></summary></entry><entry><title type="html">Soroban Rust Backend Compiler Plugin Deep Dive: Translating Branching Logic</title><link href="http://localhost:4000/2024/07/09/dtr_to_rust_branching.html" rel="alternate" type="text/html" title="Soroban Rust Backend Compiler Plugin Deep Dive: Translating Branching Logic" /><published>2024-07-09T00:00:00-06:00</published><updated>2024-07-09T00:00:00-06:00</updated><id>http://localhost:4000/2024/07/09/dtr_to_rust_branching</id><content type="html" xml:base="http://localhost:4000/2024/07/09/dtr_to_rust_branching.html"><![CDATA[<p>DTR, or <a href="http://localhost:4000/digicus/#digicus-textual-representation">Digicus Textual Representation</a>, defines method logic via a set of sequentially executed transactions. DTR instructions have a <em>scope</em> field to represent blocks of contiguously executed code. By jumping between scopes, we can emulate branching.</p>

<p>Consider the following DTR:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ id: 0, instruction: evaluate, input: (equal_to, 1, x), assign: CONDITONAL_RESULT_1, scope: 0}
{ id: 1, instruction: jump, input: (CONDITIONAL_RESULT_1, 1), scope: 0}
{ id: 2, instruction: jump, input: (2), scope: 0}
{ id: 3, instruction: print, input: ("If only"), scope: 1}
{ id: 4, instruction: jump, input: (0), scope: 1}
{ id: 5, instruction: evaluate, input: (equal_to, 1, y), assign: CONDITONAL_RESULT_2, scope: 2}
{ id: 6, instruction: jump, input: (CONDITIONAL_RESULT_2, 3), scope: 2}
{ id: 7, instruction: jump, input: (4), scope: 2}
{ id: 8, instruction: print, input: ("ElseIf"), scope: 3}
{ id: 9, instruction: jump, input: (0), scope: 3}
{ id: 10, instruction: print, input: ("Else Only"), scope: 4}
{ id: 11, instruction: jump, input: (0), scope: 4}
{ id: 12, instruction: print, input: ("The End"), scope: 0}
</code></pre></div></div>

<p>Graphically, the flow works like this:</p>
<div style="text-align:center">
  <img src="../../../images/graphical-if-elseif-else-dtr_to_rust.png" alt="loop visual" />
</div>

<p>From here, we can condense down the conditional evaluations to get to a slightly easier to consume graphic. Notice that we retain the ids.</p>
<div style="text-align:center">
  <img src="../../../images/graphical-if-elseif-else-dtr_to_rust_2.png" alt="loop visual" />
</div>

<p>Combining jumps back to 0, we get:</p>
<div style="text-align:center">
  <img src="../../../images/graphical-if-elseif-else-dtr_to_rust_3.png" alt="loop visual" />
</div>

<p>Which can be reorganized with pseudocode annotations:</p>
<div style="text-align:center">
  <img src="../../../images/graphical-if-elseif-else-dtr_to_rust_4.png" alt="loop visual" />
</div>

<p>So the question becomes: <em>how do we perform this (1) condensation, (2) compaction, and then (3) Connection</em> programmatically?</p>

<p>To do so, we’ll construct a directed, acyclic graph. Each vertex in this graph has at most two edges:</p>
<ol>
  <li><strong>detour:</strong> the highest precedence edge to flow through</li>
  <li><strong>continue:</strong> the lowest precedence edge</li>
</ol>

<p>We’ll name this structure a left child preferential binary tree (where the left child is the <em>detour</em>).</p>

<p>This graph will be constructed in three steps:</p>
<ol>
  <li><strong>Condensation:</strong> in this step, we seek to condense the conditional evaluation logic such that we can replace the programmatically generated input variable within the conditional jump instruction. For more elaborate/complex evaluations, this may be a bit of challenge.</li>
  <li><strong>Compaction:</strong> combine same scope, sequential instructions into <em>segments</em>. Each of these <em>segments</em> represents a linear execution flow and will be a node in the flow graph.</li>
  <li><strong>Connection:</strong> if we operate under the assumption that related conditionals are contiguous (which holds true for the match statement implementation in the <code class="language-plaintext highlighter-rouge">soroban_rust_frontend</code> compiler frontend), we can iterate through the instructions, linking nodes based on their entry points.</li>
</ol>

<p>Continuing with our example, we’d get a graph defined as so (where each number is an instruction identifier).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Self: 1
Detour: 3
Continue: 2

Self: 2
Detour: 6
Continue: X

Self: 3
Detour: X
Continue: X 

Self: 6
Detour: 8
Continue: 7

Self: 7
Detour: 10
Continue: X

Self: 8
Detour: X
Continue: X

Self: 10
Detour: X
Continue: X

Self: 12
Detour: X
Continue: X 
</code></pre></div></div>

<p>With this, we can generate rust code by traversing our graph based on the precedence defined. Here, (1) is our root, so we will start there. We will explain each step with our current generated code following along below each explanation.</p>

<p>First, start with 1. We generate self and then detour to 3.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 1
if 1 == x {
</code></pre></div></div>

<p>At 3 we generate self (indented since we are an inner scope) then we halt since we’re jumping back to 0.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if 1 == x {
  // 3
  log!("If Only");
// 4
}
</code></pre></div></div>

<p>Since our detour finished, at 1 we then continue on to 2. At 2 we generate self, then detour to 6.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if 1 == x {
  // 3
  log!("If Only");
// 4
} 
// 2
else {
</code></pre></div></div>

<p>At 6 we generate self, then detour to 8.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if 1 == x {
  // 3
  log!("If Only");
// 4
} 
// 2
else {
  // 6
  if 1 == y {
</code></pre></div></div>

<p>At 8 we generate self, then we halt since we’re jumping back to 0.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if 1 == x {
  // 3
  log!("If Only");
// 4
} 
// 2
else {
  // 6
  if 1 == y {
    // 8
    log!("ElseIf");
  // 9
  }
</code></pre></div></div>

<p>Returning from 8, back at 6, we continue to 7. We generate self, then detour to 10.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if 1 == x {
  // 3
  log!("If Only");
// 4
} 
// 2
else {
  // 6
  if 1 == y {
    // 8
    log!("ElseIf");
  // 9
  }
  // 7
  else {
</code></pre></div></div>

<p>At 10, we generate self, and then halt since we’re jumping to 0.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if 1 == x {
  // 3
  log!("If Only");
// 4
} 
// 2
else {
  // 6
  if 1 == y {
    // 8
    log!("ElseIf");
  // 9
  }
  // 7
  else {
    // 10
    log!("Else Only");
  // 11
  }
// TECHNICALLY IN REAL DTR WE'D have another jump here... typo in the example.
}
</code></pre></div></div>

<p>All the way back at 1, we sequentially iterate (due to the nature of execution of DTR instruction sets) at scope 0 until we make it to instruction 12. Finally at 12, we mark 12 as visited and generate 12. As this instruction halts, we sequentially iterate, realizing we’re at the end of execution.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if 1 == x {
  // 3
  log!("If Only");
// 4
} 
// 2
else {
  // 6
  if 1 == y {
    // 8
    log!("ElseIf");
  // 9
  }
  // 7
  else {
    // 10
    log!("Else Only");
  // 11
  }
}
log!("The End");
</code></pre></div></div>

<p>And it’s a success! We’ve designed an algorithm to construct a left child preferential binary tree and traversed it to generate the correct Rust code from DTR. We can leverage this strategy to similarly solve the following branching constructs:</p>

<ul>
  <li>if-else</li>
  <li>nested if-else</li>
  <li>match statements</li>
</ul>

<div style="text-align: center;">
    <img src="https://media1.tenor.com/m/CgjirlJs7xsAAAAC/nice-nooice.gif" alt="noice" />
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[DTR, or Digicus Textual Representation, defines method logic via a set of sequentially executed transactions. DTR instructions have a scope field to represent blocks of contiguously executed code. By jumping between scopes, we can emulate branching.]]></summary></entry><entry><title type="html">Rust Specific Construct Representations ep. 2: Let-Else</title><link href="http://localhost:4000/2024/07/03/let-else.html" rel="alternate" type="text/html" title="Rust Specific Construct Representations ep. 2: Let-Else" /><published>2024-07-03T00:00:00-06:00</published><updated>2024-07-03T00:00:00-06:00</updated><id>http://localhost:4000/2024/07/03/let-else</id><content type="html" xml:base="http://localhost:4000/2024/07/03/let-else.html"><![CDATA[<p>Stable since <a href="https://releases.rs/docs/1.65.0/">November 3, 2022</a>, Rust’s <a href="https://doc.rust-lang.org/rust-by-example/flow_control/let_else.html"><code class="language-plaintext highlighter-rouge">let-else</code></a> is a bit of an odd one (<a href="https://rust-lang.github.io/rfcs/3137-let-else.html">RFC</a>).</p>

<p>As defined by the linked <code class="language-plaintext highlighter-rouge">Rust by Example</code> docs above:</p>
<blockquote>
  <p>With let-else, a refutable pattern can match and bind variables in the surrounding scope like a normal let, or else diverge (e.g. break, return, panic!) when the pattern doesn’t match.</p>
</blockquote>

<p>The RFC doc more formally defines it as:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let PATTERN: TYPE = EXPRESSION else DIVERGING_BLOCK;
</code></pre></div></div>

<p>and notes that this is the <em>the counterpart of if-let expressions</em> which we covered in a previous post.</p>

<p>Essentially, we are attempting to bind some expression to some type and if this is “non-bindable”, then execute the diverging block.</p>

<p>In generalized DTR, we’d get something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ instruction: evaluate, input: (SOME_EXPRESSION), assign: SOME_EXPRESSION_RESULT, scope: 0 }
{ instruction: evaluate, input: (try_assign, SOME_EXPRESSION_RESULT, SOME_TYPE), assign: SUCCESSFUL_ASSIGN_RESULT, scope: 0 }
{ instruction: jump, input: (SUCCESSFUL_ASSIGN_RESULT, 1), scope: 0 }
{ instruction: jump, input: (2), scope: 0 }
{ instruction: jump, input: (0), scope: 1 } // effectively "jump" over the diverging block
*** DIVERGING BLOCK at scope 2 ***
{ instruction: jump, input: (0), scope: 2 }
</code></pre></div></div>

<h3 id="specific-example">Specific Example</h3>

<p>For a specific example, consider the following rust code:</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">get_count_item</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">foobar</span><span class="p">)</span> <span class="o">=</span> <span class="n">ok_foobar</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nd">panic!</span><span class="p">(</span><span class="s">"Can't parse ok foobar"</span><span class="p">);</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We can then translate this to DTR leveraging the notion of a <code class="language-plaintext highlighter-rouge">try_assign</code> from the <code class="language-plaintext highlighter-rouge">if-let</code> post.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// [0] let Ok(foobar) = ok_foobar
{ instruction: evaluate, input: (try_assign, Ok(foobar), ok_foobar), assign: SUCCESSFUL_ASSIGN_RESULT, scope: 0 }
// [0] if let ..., scope = 1
{ instruction: jump, input: (SUCCESSFUL_ASSIGN_RESULT, 1), scope: 0 }
// [0] else, scope = 2
{ instruction: jump, input: (2), scope: 0 }
// [1] scope = 0
{ instruction: jump, input: (0), scope: 1 }
// [2] panic!("Can't parse ok foobar");
{ instruction: exit_with_message, input: ("\"Can't parse ok foobar\""), scope: 2}
</code></pre></div></div>

<p><strong>Note:</strong> here we don’t have to “jump back to scope 0” since <code class="language-plaintext highlighter-rouge">exit_with_message</code> is a terminal instruction.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Stable since November 3, 2022, Rust’s let-else is a bit of an odd one (RFC).]]></summary></entry><entry><title type="html">Rust Specific Construct Representations ep. 1: If-Let</title><link href="http://localhost:4000/2024/07/01/if-let.html" rel="alternate" type="text/html" title="Rust Specific Construct Representations ep. 1: If-Let" /><published>2024-07-01T00:00:00-06:00</published><updated>2024-07-01T00:00:00-06:00</updated><id>http://localhost:4000/2024/07/01/if-let</id><content type="html" xml:base="http://localhost:4000/2024/07/01/if-let.html"><![CDATA[<p>The <code class="language-plaintext highlighter-rouge">if-let</code> (<a href="https://rust-lang.github.io/rfcs/0160-if-let.html">RFC</a>) was initially proposed August 16, 2014. A brief description from the RFC:</p>

<blockquote>
  <p>Introduce a new if let PAT = EXPR { BODY } construct. This allows for refutable pattern matching without the syntactic and semantic overhead of a full match, and without the corresponding extra rightward drift. Informally this is known as an “if-let statement”.</p>
</blockquote>

<p>This pattern/expression bring syntactic sugar to <a href="https://doc.rust-lang.org/rust-by-example/flow_control/if_let.html">awkward match expressions</a> such as:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Make `optional` of type `Option&lt;i32&gt;`</span>
<span class="k">let</span> <span class="n">optional</span> <span class="o">=</span> <span class="nf">Some</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>

<span class="k">match</span> <span class="n">optional</span> <span class="p">{</span>
    <span class="nf">Some</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"This is a really long string and `{:?}`"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
        <span class="c1">// ^ Needed 2 indentations just so we could destructure</span>
        <span class="c1">// `i` from the option.</span>
    <span class="p">},</span>
    <span class="n">_</span> <span class="k">=&gt;</span> <span class="p">{},</span>
    <span class="c1">// ^ Required because `match` is exhaustive. Doesn't it seem</span>
    <span class="c1">// like wasted space?</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Instead, (<em>here continuing to reference the Rust by Example linked above</em>) we could do:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="n">letter</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Matched {:?}!"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Didn't match a number. Let's go with a letter!"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>From the RFC, we get the generalized pattern:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if let PAT = EXPR { BODY }
</code></pre></div></div>

<p>Generalizing to DTR, we can do something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ instruction: evaluate, input: (SOME_EXPRESSION), assign: SOME_EXPRESSION_RESULT, scope: 0 }
{ instruction: evaluate, input: (try_assign, SOME_EXPRESSION_RESULT, SOME_TYPE), assign: SUCCESSFUL_ASSIGN_RESULT, scope: 0 }
{ instruction: jump, input: (SUCCESSFUL_ASSIGN_RESULT, 1), scope: 0 }
*** BODY at scope 1 ***
{ instruction: jump, input: (0), scope: 1 }
</code></pre></div></div>

<p>Let’s now handle that the specific example above and translate to DTR.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// [0] let Some(i) = letter
{ instruction: evaluate, input: (try_assign, Some(i), letter), assign: SUCCESSFUL_ASSIGN_RESULT, scope: 0 }
// [0] if let ..., scope = 1
{ instruction: jump, input: (SUCCESSFUL_ASSIGN_RESULT, 1), scope: 0 }
// [0] else, scope = 2
{ instruction: jump, input: (2), scope: 0 }
// [1] println!("Matched {:?}!", i);
{ instruction: print, input: ("\"Matched {:?}!\"", i), scope: 1}
// [1] scope = 0
{ instruction: jump, input: (0), scope: 1 }
// [2]  println!("Didn't match a number. Let's go with a letter!");
{ instruction: print, input: (\""Didn't match a number. Let's go with a letter!\""), scope: 2}
// [2] scope = 0
{ instruction: jump, input: (0), scope: 2 }
</code></pre></div></div>

<h3 id="try_assign">try_assign</h3>

<p>In order to handle the <code class="language-plaintext highlighter-rouge">if-let</code>, we introduced a new valid method (first arg to the <code class="language-plaintext highlighter-rouge">evaluate</code> instruction). A <code class="language-plaintext highlighter-rouge">try_assign</code> is not something we expect to offer in the Digicus native IDE. However, it is helpful to represent the following concept from Rust:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>An attempted assignment to a variable that may fail due to invalid pattern matching.
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">try_assign</code> accepts two inputs:</p>
<ol>
  <li>the left hand side of the conditional let application</li>
  <li>the right hand side</li>
</ol>

<p>The result of this operation is the value indicated by the <code class="language-plaintext highlighter-rouge">assign</code> field of the instruction.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[The if-let (RFC) was initially proposed August 16, 2014. A brief description from the RFC:]]></summary></entry><entry><title type="html">Representing Loops: An Exploration of Non-Sequential Logic Execution</title><link href="http://localhost:4000/2024/06/27/loops.html" rel="alternate" type="text/html" title="Representing Loops: An Exploration of Non-Sequential Logic Execution" /><published>2024-06-27T00:00:00-06:00</published><updated>2024-06-27T00:00:00-06:00</updated><id>http://localhost:4000/2024/06/27/loops</id><content type="html" xml:base="http://localhost:4000/2024/06/27/loops.html"><![CDATA[<p>Most programming languages that target DTR have some sort of looping behavior. As an example, consider the logic to calculate the sum of the first 10 integers, written in Rust.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="mi">10</span> <span class="p">{</span>
  <span class="n">num</span> <span class="o">+=</span> <span class="n">i</span>
<span class="p">}</span>

<span class="nd">println!</span><span class="p">(</span><span class="s">"Sum of 1 through 10 is: {}"</span><span class="p">,</span> <span class="n">num</span><span class="p">);</span>
</code></pre></div></div>

<p>Constructing a DTR representation is challenging; this logic is not sequentially executed, requiring repetitive calls to some <em>body</em> of code until a condition is met. Visually, we do something like this:</p>

<div style="text-align:center">
  <img src="../../../images/loop_visual.png" alt="loop visual" />
</div>

<p>We can then use yellow <em>sticky notes</em> to “fill in” each box with the relevant code from the example.</p>

<div style="text-align:center">
  <img src="../../../images/loop_visual_filled_in.png" alt="loop visual filled in" />
</div>

<p>With an idea of how we might visually represent the looping Rust code, can we come up with a way to represent this with DTR? Unfortunately, while we do have a way to represent a fork in execution via scoping:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// [0] CONDITIONAL_JUMP_0 = i &lt;= 10
{ instruction: "evaluate", input: (less_than_or_equal_to, i, 10), assign: CONDITIONAL_JUMP_0, scope: 0 }
// [0] if CONDITIONAL_JUMP_0, scope = 1
{ instruction: "jump", input: (CONDITIONAL_JUMP_0, 1), scope: 0 }
// [1] num = num + i
{ instruction: "add", input: (num, i), assign: num, scope: 1 }
// [1] i = i + 1
{ instruction: "add", input: (i, 1), assign: i, scope: 1 }
</code></pre></div></div>

<p>the simplistic (naive?) sequential model we have initially adopted does not have a clean way of representing “go back to some previous point in execution”.</p>

<p>For this, we will introduce:</p>

<ol>
  <li>instruction ids</li>
  <li>a <code class="language-plaintext highlighter-rouge">goto</code> instruction</li>
</ol>

<p><strong>»»»[side bar]»»»</strong></p>

<p><em>A Note on Goto:</em> most modern programming languages do not support <code class="language-plaintext highlighter-rouge">goto</code> statements. Many (<a href="https://craftofcoding.wordpress.com/2022/03/28/ever-wondered-why-goto-is-considered-harmful/">like this blog post</a>) will point out the costly complexity of goto statements as a primary driver for their avoidance. While introducing the notion of a <code class="language-plaintext highlighter-rouge">goto</code> might make some folks uncomfortable, we do so sparingly and with the intention of eventual removal (especially if we see folks abusing it). For now, however, the <code class="language-plaintext highlighter-rouge">goto</code> will simply live “in the backend” (as an artifact of translation between Rust and DTR). We plan to re-evaluate this decision once Digicus evolves from a visualization first tool to a creation native tool.</p>

<p><strong>«««[side bar fin]«««</strong></p>

<p>In summary, a loop has three main parts:</p>

<ol>
  <li>initialize iterator</li>
  <li>evaluate condition</li>
  <li><em>if continuing</em> execute body, then increment iterator</li>
</ol>

<p>Notice that (1) can be completed <em>outside the actual loop evaluation</em>. Furthermore, the “<em>if continuing</em>” flow can leverage the scoping behavior as already defined for conditionals following the sequential instruction flow.</p>

<p>Thus, with what we defined above, we are almost there. Let’s now take what we had, add id’s, then add a sixth <code class="language-plaintext highlighter-rouge">goto</code> instruction which exists in scope 1 and goes back to instruction 1:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ id: 0, instruction: "assign", input: (1), assign: i, scope: 0 }

########### Loop ###########
// [0] CONDITIONAL_JUMP_0 = i &lt;= 10
{ id: 1, instruction: "evaluate", input: (less_than_or_equal_to, i, 10), assign: CONDITIONAL_JUMP_0, scope: 0 }
// [0] if CONDITIONAL_JUMP_0, scope = 1
{ id: 2, instruction: "jump", input: (CONDITIONAL_JUMP_0, 1), scope: 0 }
// [1] num = num + i
{ id: 3, instruction: "add", input: (num, i), assign: num, scope: 1 }
// [1] i = i + 1
{ id: 4, instruction: "add", input: (i, 1), assign: i, scope: 1 }
// [1] go back to conditional (instruction id = 1)
{ id: 5, instruction: "goto", input: (1), scope: 1 }
############################
</code></pre></div></div>

<p>With this, we’ve got a viable representation of loops. However, before claiming victory, let’s see if we can easily translate back to rust.</p>

<p><strong>Converting this back to Rust</strong></p>

<p>With each instruction having an id above, we can associate the instructions to the generated Rust.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// [0]</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="c1">// [1] &amp; [2]                </span>
<span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="p">{</span> <span class="c1">// &lt;------------</span>
  <span class="c1">// [3]                   //  |</span>
  <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>           <span class="c1">//  |</span>
  <span class="c1">// [4]                   //  |</span>
  <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>               <span class="c1">//  |</span>
  <span class="c1">// [5] ----------------------|</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>Note:</em> while we <em>did</em> translate back to a <code class="language-plaintext highlighter-rouge">while</code> instead of a <code class="language-plaintext highlighter-rouge">for</code> loop, these are functionally the same.</p>

<h3 id="a-final-test-nested-loops">A Final Test: Nested Loops</h3>

<p>This time, let’s try a nested loop (in this simplified example, we will ignore each block’s body).</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="mi">10</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="mi">5</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now for the DTR.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// [0] i = 1
{ id: 0, instruction: "assign", input: (1), assign: i, scope: 0 }

########### Loop ###########
// [0] CONDITIONAL_JUMP_0 = i &lt;= 10
{ id: 1, instruction: "evaluate", input: (less_than_or_equal_to, i, 10), assign: CONDITIONAL_JUMP_0, scope: 0 }
// [0] if CONDITIONAL_JUMP_0, scope = 1
{ id: 2, instruction: "jump", input: (CONDITIONAL_JUMP_0, 1), scope: 0 }
// [1] j = 0
{ id: 3, instruction: "assign", input: (0), assign: j, scope: 1 }
// [1] CONDITIONAL_JUMP_1 = j &lt;= 5
{ id: 4, instruction: "evaluate", input: (less_than_or_equal_to, j, 10), assign: CONDITIONAL_JUMP_1, scope: 1 }
// [1] if CONDITIONAL_JUMP_1, scope = 2
{ id: 5, instruction: "jump", input: (CONDITIONAL_JUMP_1, 2), scope: 1 }
// [2] j = j + 1
{ id: 6, instruction: "add", input: (j, 1), assign: j, scope: 2 }
// [2] go back to conditional (instruction id = 4)
{ id: 7, instruction: "goto", input: (33333), scope: 2 }
// [1] i = i + 1
{ id: 8, instruction: "add", input: (i, 1), assign: i, scope: 1 }
// [1] go back to conditional (instruction id = 1)
{ id: 9, instruction: "goto", input: (1), scope: 1 }
############################
</code></pre></div></div>

<p>And finally back to Rust.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// [0]</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="c1">// [1] &amp; [2]                </span>
<span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="p">{</span> <span class="c1">// &lt;------------</span>
   <span class="c1">// [3]                      |</span>
   <span class="k">let</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>               <span class="c1">// |</span>
   <span class="c1">// [4] &amp; [5]                |</span>
   <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span> <span class="p">{</span> <span class="c1">// &lt;---      |</span>
      <span class="c1">// [6]         // |      |</span>
      <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>     <span class="c1">// |      |</span>
      <span class="c1">// [7]------------|      |</span>
   <span class="p">}</span>                        <span class="c1">// |</span>
   <span class="c1">// [8]                   // |</span>
   <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>               <span class="c1">// |</span>
   <span class="c1">// [9]----------------------|</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Most programming languages that target DTR have some sort of looping behavior. As an example, consider the logic to calculate the sum of the first 10 integers, written in Rust.]]></summary></entry></feed>